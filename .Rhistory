2,
function(i){i/thresholdsAllWide[5]}))
thresholdsAllPercentReshape1 <- reshape(thresholdsAllPercent, direction= "long",
varying=list(1:4, 5:8),
ids=row.names(thresholdsAllPercent),
idvar="name",
timevar="session",
times=list("1","2",
"3","4"))
thresholdsAllPercentLong <- reshape(thresholdsAllPercentReshape1, direction= "long",
varying=list(2:3),
times=list("detection","identification"))
# Remove unused columns
thresholdsAllPercentLong$id <- NULL
row.names(thresholdsAllPercentLong) <- NULL
# Rename columns
colnames(thresholdsAllPercentLong)[3] <- "condition"
colnames(thresholdsAllPercentLong)[4] <- "threshold"
# Calculate the mean threshold for each session
meanThresholdsPercent <- data.frame(session = as.numeric(
levels(factor(thresholdsAllPercentLong$session))),
tapply(thresholdsAllPercentLong$threshold,
list(thresholdsAllPercentLong$session,
thresholdsAllPercentLong$condition),
mean))
# Reshape the data frame into long format
meanThresholdPercentLong <- melt(meanThresholdsPercent, id.var="session",
variable.name = "condition",
value.name = "threshold")
# Prepare plots
plotThresholds <- ggplot(data=thresholdsAllLong,
aes(x=as.numeric(session),
y=threshold,
color=name,
linetype=condition),
alpha = 0.4) +
geom_line() +
xlab("Sessions") +
ylab("Thresholds") +
facet_grid(name ~ ., scales="free") +
theme(panel.margin = unit(3.5, "mm"))
plotThresholdsPercent <- ggplot(data=thresholdsAllPercentLong,
aes(x=as.numeric(session),
y=threshold,
color=name,
linetype=condition),
alpha = 0.4) +
geom_line() +
xlab("Sessions") +
ylab("Thresholds") +
facet_grid(name ~ ., scales="free") +
theme(panel.margin = unit(3.5, "mm"))
plotMeanThresholds <- ggplot(data=meanThresholdLong,
aes(x=session,
y=threshold,
linetype=condition),
alpha = 0.4) +
geom_line() +
xlab("Sessions") +
ylab("Thresholds") +
ggtitle("Mean threshold for detection and identification conditions")
plotMeanThresholdsPercent <- ggplot(data=meanThresholdPercentLong,
aes(x=session,
y=threshold,
linetype=condition),
alpha = 0.4) +
geom_line() +
xlab("Sessions") +
ylab("Thresholds") +
ggtitle("Mean threshold for detection and identification conditions")
plotDetById <- ggplot(thresholdsAllLong, aes(
x=threshold[condition=="detection"],
y=threshold[condition=="identification"],
color=name[condition=="identification"])) +
geom_point(aes(shape=session[condition=="identification"])) +
coord_fixed() +
geom_abline(intercept = 0, slope = 1) +
scale_colour_discrete(name = "Participants") +
scale_shape(name = "Sessions") +
scale_x_continuous(trans=log_trans(),
limits=c(10, 600),
breaks=c(5, 10, 20, 50, 100, 200, 500)) +
scale_y_continuous(trans=log_trans(),
limits=c(10, 600),
breaks=c(5, 10, 20, 50, 100, 200, 500)) +
xlab("Detection threshold") +
ylab("Identification threshold") +
ggtitle("Detection against identification thresholds
\n for all subjects and all sessions")
plotDetByIdPrepost <- ggplot(thresholdAllPrepostLong, aes(
x=threshold[condition=="detection"],
y=threshold[condition=="identification"],
color=name[condition=="identification"])) +
geom_point(aes(shape=prepost[condition=="identification"])) +
coord_fixed() +
geom_path(arrow=arrow(length=unit(0.3,"cm"), ends = "first"),
size=0.4, aes(group=name[condition=="identification"])) +
geom_abline(intercept = 0, slope = 1) +
scale_colour_discrete(name = "Participants") +
scale_shape_manual(name = "Sessions", values=c(1, 16),
breaks=c("pre","post")) +
scale_x_continuous(trans=log_trans(),
limits=c(5, 600),
breaks=c(5, 10, 20, 50, 100, 200, 500)) +
scale_y_continuous(trans=log_trans(),
limits=c(5, 600),
breaks=c(5, 10, 20, 50, 100, 200, 500)) +
xlab("Detection threshold") +
ylab("Identification threshold") +
ggtitle("Detection against identification thresholds
\n Pre vs. Post test")
plotDetByIdPrepre <- ggplot(thresholdAllPrepreLong, aes(
x=threshold[condition=="detection"],
y=threshold[condition=="identification"],
color=name[condition=="identification"])) +
geom_point(aes(shape=prepre[condition=="identification"])) +
coord_fixed() +
geom_path(arrow=arrow(length=unit(0.3,"cm"), ends = "last"),
size=0.4, aes(group=name[condition=="identification"])) +
geom_abline(intercept = 0, slope = 1) +
scale_colour_discrete(name = "Participants") +
scale_shape_manual(name = "Sessions", values=c(16, 1),
breaks=c("first","second")) +
scale_x_continuous(trans=log_trans(),
limits=c(5, 600),
breaks=c(5, 10, 20, 50, 100, 200, 500)) +
scale_y_continuous(trans=log_trans(),
limits=c(5, 600),
breaks=c(5, 10, 20, 50, 100, 200, 500)) +
xlab("Detection threshold") +
ylab("Identification threshold") +
ggtitle("Detection against identification thresholds
\n First vs. Second test")
############ DELTAF ANALYSES ############
# Compute the mean of deltaF between subjects
# The list is the factors used (the function is applied to each levels)
deltaFMeans <- data.frame(tapply(data.threshold$deltaF,
list(data.threshold$trialNum,
data.threshold$sessionNum,
data.threshold$task),
mean))
deltaFMeansreshaped1 <- reshape(deltaFMeans, direction= "long",
varying=list(1:4, 5:8),
ids=row.names(deltaFMeans),
idvar="trialNum",
timevar="session",
times=list("1","2",
"3","4"))
deltaFMeansLong <- reshape(deltaFMeansreshaped1, direction= "long",
varying=list(2:3),
times=list("detection","identification"))
# Remove unused columns
deltaFMeansLong$id <- NULL
row.names(deltaFMeansLong) <- NULL
# Rename columns
colnames(deltaFMeansLong)[3] <- "condition"
colnames(deltaFMeansLong)[4] <- "threshold"
row.names(deltaFMeansLong) <- NULL
# Prepare plots
plotDeltaF <- ggplot(data=data.threshold,
aes(x=trialNum,
y=deltaF,
color=factor(sessionNum)),
alpha = 0.4) +
xlab("Trials") +
ylab("DeltaF (cents)") +
geom_line() +
scale_color_discrete(name="Session") +
facet_grid(name ~ task, scales="free") +
theme(panel.margin = unit(3.5, "mm"))
plotDeltaFMeans <- ggplot(data=deltaFMeansLong,
aes(x=as.numeric(trialNum),
y=threshold,
color=factor(session)),
alpha = 0.4) +
geom_line() +
scale_color_discrete(name="Session") +
facet_grid(. ~ condition) +
xlab("Trials") +
ylab("DeltaF (cents)") +
ggtitle("Mean of deltaF")
data.mountain.yAxis <- subset(data, grepl("yAxis", condition),
c(id, yTopDist, targetTone, CurXY, trialNumYAxis,
result, totalScore, sessionNum, name, duration,
time, score, sessionNumMount))
# Sort the data according to time then to trial number
data.mountain.yAxis <- data.mountain.yAxis[order(
data.mountain.yAxis$time, data.mountain.yAxis$trialNumYAxis),]
row.names(data.mountain.yAxis) <- NULL
# Extract trial score and replace the score values if it exists (it exists for all except sa20 and ab22)
data.mountain.yAxis$score <-
((1 / (((data.mountain.yAxis$duration/100)+1)^2)) + 1) *
(600*(((100-data.mountain.yAxis$result)/100)^2))
# Make moving average for scores
zooYAxisAccuracy <- zoo(data.mountain.yAxis$result)
data.mountain.yAxis$YAxisAccuracyRoll <- as.numeric(
ave(data.mountain.yAxis$result,
data.mountain.yAxis$name,
FUN = function(x) rollapply(
x,
width = 10,
FUN = mean,
fill = NA,
partial = FALSE)))
# Make moving average for durations
zooYAxisDur <- zoo(data.mountain.yAxis$duration)
data.mountain.yAxis$YAxisDurRoll <- as.numeric(
ave(data.mountain.yAxis$duration,
data.mountain.yAxis$name,
FUN = function(x) rollapply(
x,
width = 10,
FUN = mean,
fill = NA,
partial = FALSE)))
# Make moving average for scores
zooYAxisScore <- zoo(data.mountain.yAxis$score)
data.mountain.yAxis$YAxisScoresRoll <- as.numeric(
ave(data.mountain.yAxis$score,
data.mountain.yAxis$name,
FUN = function(x) rollapply(
x,
width = 10,
FUN = mean,
fill = NA,
partial = FALSE)))
# Create long data frame for durations
yAxisDur <- subset(data.mountain.yAxis,
select = c(id, duration, YAxisDurRoll, name, trialNumYAxis))
yAxisDurLong <- melt(yAxisDur, c("id", "name", "trialNumYAxis"))
# Create long data frame for scores
yAxisScores <- subset(data.mountain.yAxis,
select = c(id, score, YAxisScoresRoll, name, trialNumYAxis))
yAxisScoresLong <- melt(yAxisScores, c("id", "name", "trialNumYAxis"))
# Create long data frame for accuracy
yAxisAcc <- subset(data.mountain.yAxis,
select = c(id, result, YAxisAccuracyRoll, name, trialNumYAxis))
yAxisAccLong <- melt(yAxisAcc, c("id", "name", "trialNumYAxis"))
# Prepare plots
plotAcc <- ggplot(data=yAxisAccLong,
aes(x=trialNumYAxis,
y=value,
alpha = variable,
color=name)) +
scale_alpha_manual(name="Display", labels=c("Raw values",
"Rolling mean \n(10 values)"),
values=c(0.3, 1)) +
guides(color=FALSE) +
xlab("Trials") +
ylab("Accuracy (in percent error)") +
geom_line() +
facet_grid(name ~ ., scales = "free") +
theme(panel.margin = unit(4.5, "mm"))
plotDur <- ggplot(data=yAxisDurLong,
aes(x=trialNumYAxis,
y=value,
alpha = variable,
color=name)) +
scale_alpha_manual(name="Display", labels=c("Raw values",
"Rolling mean \n(10 values)"),
values=c(0.3, 1)) +
guides(color=FALSE) +
xlab("Trials") +
ylab("Duration (in seconds)") +
geom_line() +
facet_grid(name ~ ., scales = "free") +
theme(panel.margin = unit(4.5, "mm"))
plotScores <- ggplot(data=yAxisScoresLong,
aes(x=trialNumYAxis,
y=value,
alpha = variable,
color=name)) +
scale_alpha_manual(name="Display", labels=c("Raw values",
"Rolling mean \n(10 values)"),
values=c(0.3, 1)) +
guides(color=FALSE) +
xlab("Trials") +
ylab("Scores (in points)") +
geom_line() +
facet_grid(name ~ ., scales = "free") +
theme(panel.margin = unit(4.5, "mm"))
# Accuracy by duration
plotAccByDur <- ggplot(data=data.mountain.yAxis,
aes(x=result,
y=duration,
color=name)) +
geom_point() +
xlab("Scores (percentage error)") +
ylab("Duration (in seconds)") +
ggtitle("Score in function of duration")
# Accuracy with thresholds
plotAccThresh <- ggplot(data=yAxisAccLong,
aes(x=trialNumYAxis,
y=value,
alpha = variable,
color=name)) +
scale_alpha_manual(name="Display", labels=c("Raw values",
"Rolling mean \n(10 values)"),
values=c(0.3, 1)) +
guides(color=FALSE) +
xlab("Trials") +
ylab("Accuracy (in percent error)") +
geom_line() +
facet_grid(name ~ ., scales = "free") +
ggtitle("Accuracy in the mountain task with thresholds
\nfrom the frequency threshold task")
# Accuracy by frequency
plotAccByFreq <- ggplot(data=data.mountain.yAxis,
aes(x=result,
y=targetTone,
color=name)) +
geom_point() +
xlab("Scores (percentage error)") +
ylab("Frequency of the target tone (in Hz)") +
ggtitle("Score in function of frequency of the target tone")
totalScores <- data.frame(name=levels(factor(data.mountain.yAxis.longi$name)),
tapply(data.mountain.yAxis.longi$totalScore,
list(data.mountain.yAxis.longi$name,
data.mountain.yAxis.longi$sessionNumMount),
max))
# This file requires the R file threshold.R
# threshold.R has to be executed before longitudAnalysis.R
data.threshold.longi <- subset(data, (grepl("threshold", id))
& ((grepl("va", name))
| (grepl("df", name))),
c(id, trialNum,sessionNum,sessionThreshNum,
reversal,  reversals,  task,  startTrial,
tone1, tone2,  tone3, tone4, deltaF,
goodAnswer,	roving,	answer,	score, name,
trainSession))
# Add the total session number (through the different days of training)
data.threshold.longi$sessionTot <- (as.numeric(data.threshold.longi$sessionNum)
+ 1) +
as.numeric(data.threshold.longi$trainSession) * 4
thresholdsLongiAllWide <- data.frame(tapply(
data.threshold.longi$deltaF[data.threshold.longi$reversals > 4],
list(data.threshold.longi$name[data.threshold.longi$reversals > 4],
data.threshold.longi$sessionTot[data.threshold.longi$reversals > 4],
data.threshold.longi$task[data.threshold.longi$reversals > 4]),
mean))
thresholdsLongiAllreshaped1 <- reshape(thresholdsLongiAllWide, direction= "long",
varying=list(1:16, 17:32),
ids=row.names(thresholdsLongiAllWide),
idvar="name",
timevar="session",
times=list("1","2","3","4",
"5","6","7","8",
"9","10","11","12",
"13","14","15","16"))
thresholdsLongiAllLong <- reshape(thresholdsLongiAllreshaped1, direction= "long",
varying=list(2:3),
times=list("detection","identification"))
# Remove unused columns
thresholdsLongiAllLong$id <- NULL
row.names(thresholdsLongiAllLong) <- NULL
# Rename columns
colnames(thresholdsLongiAllLong)[3] <- "condition"
colnames(thresholdsLongiAllLong)[4] <- "threshold"
# Prepare plots
plotThresholdsLongi <- ggplot(data=thresholdsLongiAllLong,
aes(x=as.numeric(session),
y=threshold,
color=name,
linetype=condition),
alpha = 0.4) +
geom_line() +
xlab("Sessions") +
ylab("Thresholds") +
facet_grid(name ~ ., scales="free") +
theme(panel.margin = unit(3.5, "mm")) +
scale_x_continuous(breaks=seq(0, 17, 1)) +
geom_vline(xintercept = c(5, 9, 13), linetype="longdash", color="azure4")
########### Y axis analysis
data.mountain.yAxis.longi <- subset(data.mountain.yAxis,
((grepl("va", name))
| (grepl("df", name))),
c(id, yTopDist, targetTone, CurXY, trialNumYAxis,
result, name, duration, time, score,
YAxisAccuracyRoll, YAxisDurRoll,
YAxisScoresRoll, totalScore, sessionNum,
sessionNumMount))
trialNumTot <- data.frame(name=levels(factor(data.mountain.yAxis.longi$name)),
trialNum=tapply(data.mountain.yAxis.longi$result,
data.mountain.yAxis.longi$name,
length))
row.names(trialNumTot) <- NULL
data.mountain.yAxis.longi$trialNumTot[data.mountain.yAxis.longi$name=="va01"] <-
0:(trialNumTot$trialNum[trialNumTot$name=="va01"]-1)
data.mountain.yAxis.longi$trialNumTot[data.mountain.yAxis.longi$name=="df22"] <-
0:(trialNumTot$trialNum[trialNumTot$name=="df22"]-1)
# Calculate the total scores for each participant and each session
totalScores <- data.frame(name=levels(factor(data.mountain.yAxis.longi$name)),
tapply(data.mountain.yAxis.longi$totalScore,
list(data.mountain.yAxis.longi$name,
data.mountain.yAxis.longi$sessionNumMount),
max))
totalScoresLong <- reshape(totalScores, direction= "long",
varying=list(2:4),
v.names="totalScore",
timevar="session",
times=list("1","2","3"))
totalScoresLong$id <- NULL
row.names(totalScoresLong) <- NULL
# Calculate the mean accuracy of trials from the mean result
meanAccuracy = data.frame(name=levels(factor(data.mountain.yAxis.longi$name)),
meanAcc=tapply(data.mountain.yAxis.longi$result,
data.mountain.yAxis.longi$name,
function(i) {
600*((100-mean(i))/100)^6
}
))
# Create long data frame for durations
yAxisDurLongi <- subset(data.mountain.yAxis.longi,
select = c(id, duration, YAxisDurRoll, name, trialNumTot))
yAxisDurLongiLong <- melt(yAxisDurLongi, c("id", "name", "trialNumTot"))
# Create long data frame for scores
yAxisScoresLongi <- subset(data.mountain.yAxis.longi,
select = c(id, score, YAxisScoresRoll, name, trialNumTot))
yAxisScoresLongiLong <- melt(yAxisScoresLongi, c("id", "name", "trialNumTot"))
# Create long data frame for accuracy
yAxisAccLongi <- subset(data.mountain.yAxis.longi,
select = c(id, result, YAxisAccuracyRoll, name, trialNumTot))
yAxisAccLongiLong <- melt(yAxisAccLongi, c("id", "name", "trialNumTot"))
# Prepare plots
plotAccLongi <- ggplot(data=yAxisAccLongiLong,
aes(x=trialNumTot,
y=value,
alpha = variable,
color=name)) +
scale_alpha_manual(name="Display", labels=c("Raw values",
"Rolling mean \n(10 values)"),
values=c(0.3, 1)) +
guides(color=FALSE) +
xlab("Trials") +
ylab("Accuracy (in percent error)") +
geom_line() +
facet_grid(name ~ ., scales = "free") +
theme(panel.margin = unit(4.5, "mm"))
plotDurLongi <- ggplot(data=yAxisDurLongiLong,
aes(x=trialNumTot,
y=value,
alpha = variable,
color=name)) +
scale_alpha_manual(name="Display", labels=c("Raw values",
"Rolling mean \n(10 values)"),
values=c(0.3, 1)) +
guides(color=FALSE) +
xlab("Trials") +
ylab("Duration (in seconds)") +
geom_line() +
facet_grid(name ~ ., scales = "free") +
theme(panel.margin = unit(4.5, "mm"))
plotScoresLongi <- ggplot(data=yAxisScoresLongiLong,
aes(x=trialNumTot,
y=value,
alpha = variable,
color=name)) +
scale_alpha_manual(name="Display", labels=c("Raw values",
"Rolling mean \n(10 values)"),
values=c(0.3, 1)) +
guides(color=FALSE) +
xlab("Trials") +
ylab("Scores (in points)") +
geom_line() +
facet_grid(name ~ ., scales = "free") +
theme(panel.margin = unit(4.5, "mm"))
View(totalScores)
competScore_va01
competScore_va01 <- round(sum(totalScoresLong$totalScore[totalScoresLong$name=="va01"]), 0)
+ 1000 * meanAccuracy$meanAcc[meanAccuracy$name=="va01"]
+ 20000000 / mean(
thresholdsLongiAllLong$threshold[thresholdsLongiAllLong$name=="va01"
& thresholdsLongiAllLong$condition=="identification"]
)
+ 20000000 / mean(
thresholdsLongiAllLong$threshold[thresholdsLongiAllLong$name=="va01"
& thresholdsLongiAllLong$condition=="detection"]
)
competScore_df22 <- round(sum(totalScoresLong$totalScore[totalScoresLong$name=="df22"]), 0)
+ 1000 * meanAccuracy$meanAcc[meanAccuracy$name=="df22"]
+ 20000000 / mean(
thresholdsLongiAllLong$threshold[thresholdsLongiAllLong$name=="df22"
& thresholdsLongiAllLong$condition=="identification"]
)
+ 20000000 / mean(
thresholdsLongiAllLong$threshold[thresholdsLongiAllLong$name=="df22"
& thresholdsLongiAllLong$condition=="detection"]
)
competScore_va01
competScore_va01 <- round(sum(totalScoresLong$totalScore[totalScoresLong$name=="va01"]), 0) + 1000 * meanAccuracy$meanAcc[meanAccuracy$name=="va01"] + 20000000 / mean(
thresholdsLongiAllLong$threshold[thresholdsLongiAllLong$name=="va01"
& thresholdsLongiAllLong$condition=="identification"]
)
+ 20000000 / mean(
thresholdsLongiAllLong$threshold[thresholdsLongiAllLong$name=="va01"
& thresholdsLongiAllLong$condition=="detection"]
)
competScore_df22 <- round(sum(totalScoresLong$totalScore[totalScoresLong$name=="df22"]), 0)
+ 1000 * meanAccuracy$meanAcc[meanAccuracy$name=="df22"]
+ 20000000 / mean(
thresholdsLongiAllLong$threshold[thresholdsLongiAllLong$name=="df22"
& thresholdsLongiAllLong$condition=="identification"]
)
+ 20000000 / mean(
thresholdsLongiAllLong$threshold[thresholdsLongiAllLong$name=="df22"
& thresholdsLongiAllLong$condition=="detection"]
)
competScore_va01
competScore_va01 <- round(sum(totalScoresLong$totalScore[totalScoresLong$name=="va01"]), 0) + 1000 * meanAccuracy$meanAcc[meanAccuracy$name=="va01"] + 20000000 / mean(thresholdsLongiAllLong$threshold[thresholdsLongiAllLong$name=="va01" & thresholdsLongiAllLong$condition=="identification"]) + 20000000 / mean(thresholdsLongiAllLong$threshold[thresholdsLongiAllLong$name=="va01" & thresholdsLongiAllLong$condition=="detection"])
competScore_df22 <- round(sum(totalScoresLong$totalScore[totalScoresLong$name=="df22"]), 0) + 1000 * meanAccuracy$meanAcc[meanAccuracy$name=="df22"] + 20000000 / mean(thresholdsLongiAllLong$threshold[thresholdsLongiAllLong$name=="df22" & thresholdsLongiAllLong$condition=="identification"]) + 20000000 / mean(thresholdsLongiAllLong$threshold[thresholdsLongiAllLong$name=="df22" & thresholdsLongiAllLong$condition=="detection"])
competScore_va01
competScore_df22
