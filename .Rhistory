guides(color=FALSE) +
xlab("Trials") +
ylab("Accuracy (in percent error)") +
geom_point() +
facet_grid(name ~ .) +
theme(panel.margin = unit(4.5, "mm")) +
scale_y_continuous(limits=c(0, 5000))
pathLengthprep <- data.frame(t(sapply(data.mountain.yAxis$CurXY,
function(x) data.frame(rbind(x)))),
name=data.mountain.yAxis$name,
trialNum=data.mountain.yAxis$trialNum)
pathLength <- data.frame(X=unlist(data.frame(pathLengthprep)$X1),
Y=unlist(data.frame(pathLengthprep)$X2),
time=unlist(data.frame(pathLengthprep)$X3),
name = rep(pathLengthprep$name,
sapply(data.frame(pathLengthprep)$X1,
length)),
trialNum=rep(pathLengthprep$trialNum,
sapply(data.frame(pathLengthprep)$X1,
length)))
zooPathY <- zoo(pathLength$Y)
pathLength$pathYRoll <- as.numeric(
ave(pathLength$Y,
FUN = function(x) rollapply(
x,
width = 2,
FUN = diff,
fill = NA,
partial = FALSE)))
# Prepare the data frame with path length for all particpants and all trials
pathLengthAllprep <- data.frame(tapply(abs(pathLength$pathYRoll),
list(pathLength$trialNum, pathLength$name),
sum))
# Add row names as real vector
pathLengthAll <- data.frame(trialNum=rownames(pathLengthAllprep),
pathLengthAllprep)
pathLengthAllLong <- melt(pathLengthAll,
"trialNum",
value.name="pathLength")
# Remove row.names
row.names(pathLengthAll) <- NULL
colnames(pathLengthAllLong)[2] <- "name"
# Make moving average for path length
zooYAxisPath <- zoo(pathLengthAllLong$pathLength)
pathLengthAllLongRoll$pathLengthRoll <- as.numeric(
ave(pathLengthAllLong$pathLength,
pathLengthAllLong$name,
FUN = function(x) rollapply(
x,
width = 10,
FUN = mean,
fill = NA,
partial = FALSE)))
pathLengthAllLongRoll <- melt(pathLengthAllLong,
c("name", "trialNum"))
pathLengthAllLongRoll$name <- as.character(pathLengthAllLongRoll$name)
pathLengthAllLongRoll$trialNum <- as.numeric(
as.character(pathLengthAllLongRoll$trialNum))
# Sort the data according to time
pathLengthAllLongRoll <- pathLengthAllLongRoll[order(pathLengthAllLongRoll$name,
pathLengthAllLongRoll$variable,
pathLengthAllLongRoll$trialNum),]
ggplot(data=pathLengthAllLong,
aes(x=trialNum,
y=pathLength,
#                              alpha = variable,
color=name)) +
#   scale_alpha_manual(name="Display", labels=c("Raw values",
#                                               "Rolling mean \n(10 values)"),
#                      values=c(0.3, 1)) +
guides(color=FALSE) +
xlab("Trials") +
ylab("Accuracy (in percent error)") +
geom_point() +
facet_grid(name ~ .) +
theme(panel.margin = unit(4.5, "mm")) +
scale_y_continuous(limits=c(0, 5000))
View(pathLengthAllLong)
pathLengthAllLong$trialNum <- as.numeric(
as.character(pathLengthAllLong$trialNum))
ggplot(data=pathLengthAllLong,
aes(x=trialNum,
y=pathLength,
#                              alpha = variable,
color=name)) +
#   scale_alpha_manual(name="Display", labels=c("Raw values",
#                                               "Rolling mean \n(10 values)"),
#                      values=c(0.3, 1)) +
guides(color=FALSE) +
xlab("Trials") +
ylab("Accuracy (in percent error)") +
geom_point() +
facet_grid(name ~ .) +
theme(panel.margin = unit(4.5, "mm")) +
scale_y_continuous(limits=c(0, 5000))
data.mountain.yAxis$pathLength <- pathLengthAllLong$pathLength
View(data.mountain.yAxis)
levels(factor(data.mountain.yAxis$name))
levels(factor(pathLengthAllLong$name))
data.mountain.yAxis$pathLength <- pathLengthAllLong$pathLength[
pathLengthAllLong$variable=="pathLength"]
View(pathLengthAllLong)
data.mountain.yAxis$pathLength <- na.omit(pathLengthAllLong$pathLength)
ggplot(data=pathLengthAllLong,
aes(x=result,
y=duration,
color=name)) +
geom_point(data = data.mountain.yAxis, aes(y = duration)) +
xlab("Scores (percentage error)") +
ylab("Duration (in seconds)") +
ggtitle("Score in function of duration") +
theme(plot.title = element_text(vjust=2, lineheight=.6))
ggplot(data=pathLengthAllLong,
aes(x=result,
y=duration,
color=name)) +
geom_point(data = data.mountain.yAxis, aes(y = duration)) +
xlab("Path length (in pixels)") +
ylab("Duration (in seconds)") +
ggtitle("Path length in function of duration") +
theme(plot.title = element_text(vjust=2, lineheight=.6))
ggplot(data=pathLengthAllLong,
aes(x=pathLength,
y=duration,
color=name)) +
geom_point(data = data.mountain.yAxis, aes(y = duration)) +
xlab("Path length (in pixels)") +
ylab("Duration (in seconds)") +
ggtitle("Path length in function of duration") +
theme(plot.title = element_text(vjust=2, lineheight=.6))
ggplot(data=pathLengthAllLong,
aes(x=pathLength,
#                            y=duration,
color=name)) +
geom_point(data = data.mountain.yAxis, aes(y = duration)) +
xlab("Path length (in pixels)") +
ylab("Duration (in seconds)") +
ggtitle("Path length in function of duration") +
theme(plot.title = element_text(vjust=2, lineheight=.6))
na.omit(pathLengthAllLong$pathLength)
length(na.omit(pathLengthAllLong$pathLength))
length(na.omit(data.mountain.yAxis$pathLength))
length(na.omit(data.mountain.yAxis$duration))
pathLengthAllLong$pathLength[pathLengthAllLong$name=="ll07" & pathLengthAllLong$trialNum==0] <- 0
View(pathLengthAllLong)
data.mountain.yAxis$pathLength <- na.omit(pathLengthAllLong$pathLength)
View(data.mountain.yAxis)
View(pathLengthAllLong)
test <- rbind(data.mountain.yAxis, pathLengthAllLong)
test <- cbind(data.mountain.yAxis, pathLengthAllLong)
test <- cbind(data.mountain.yAxis, na.omit(pathLengthAllLong))
View(test)
pathLengthprep <- data.frame(t(sapply(data.mountain.yAxis$CurXY,
function(x) data.frame(rbind(x)))),
name=data.mountain.yAxis$name,
trialNum=data.mountain.yAxis$trialNum,
startTrial=data.mountain.yAxis$time)
pathLength <- data.frame(X=unlist(data.frame(pathLengthprep)$X1),
Y=unlist(data.frame(pathLengthprep)$X2),
time=unlist(data.frame(pathLengthprep)$X3),
name = rep(pathLengthprep$name,
sapply(data.frame(pathLengthprep)$X1,
length)),
trialNum=rep(pathLengthprep$trialNum,
sapply(data.frame(pathLengthprep)$X1,
length)),
startTrial=rep(pathLengthprep$startTrial,
sapply(data.frame(pathLengthprep)$X1,
length)))
View(pathLength)
zooPathY <- zoo(pathLength$Y)
pathLength$pathYRoll <- as.numeric(
ave(pathLength$Y,
FUN = function(x) rollapply(
x,
width = 2,
FUN = diff,
fill = NA,
partial = FALSE)))
pathLengthAllprep <- data.frame(tapply(abs(pathLength$pathYRoll),
list(pathLength$trialNum, pathLength$name),
sum))
# Add row names as real vector
pathLengthAll <- data.frame(trialNum=rownames(pathLengthAllprep),
pathLengthAllprep)
View(pathLengthAll)
View(pathLength)
merge(pathLengthAllLong, data.mountain.yAxis, by=0, all=TRUE)
test <- merge(pathLengthAllLong, data.mountain.yAxis, by=0, all=TRUE)
View(test)
View(pathLengthAllLong)
test <- merge(pathLengthAllLong, data.mountain.yAxis, by="row.names", all=TRUE)
View(test)
match(pathLengthAllLong$trialNum, data.mountain.yAxis$trialNum)
a <- data.frame(a=c(1, 2, 4, 6), b=c(9, 8, 8, 8))
c <- data.frame(a=c(6, 2, 1, 4), b=c(9, 8, 7, 6))
a <- data.frame(a=c(1, 2, 4, 6), b=c(2, 3, 4, 5))
match(c, a)
match(c$a, a$a)
a[match(c$a, a$a)]
a[,match(c$a, a$a)]
a[1,match(c$a, a$a)]
a[match(c$a, a$a)][1]
a[match(c$a, a$a),]
a
c
d <- cbind(a[match(c$a, a$a),], b)
d <- rbind(a[match(c$a, a$a),], b)
View(d)
d <- cbind(a[match(c$a, a$a),], b)
a[match(c$a, a$a),]
b
c
d <- cbind(a[match(c$a, a$a),], c)
View(d)
a[match(c$a, a$a),]
a[match(c$a, a$a),a$a]
a[match(c$a, a$a),1]
d <- cbind(a[match(c$a, a$a),1], c)
View(d)
a[match(c$a, a$a),]
a
a <- data.frame(a=c(1, 2, 3, 4), b=c(2, 3, 4, 5))
b <- data.frame(a=c(5,6,7,8), b=c(6,7,8,9,))
b <- data.frame(a=c(5,6,7,8), b=c(6,7,8,9))
d <- cbind(a[match(b$a, a$a),1], b)
d <- cbind(a[match(b$a, a$a),], b)
View(d)
c <- data.frame(a=c(6, 2, 1, 4), b=c(9, 8, 7, 6))
a <- data.frame(a=c(1, 2, 4, 6), b=c(9, 8, 8, 8))
a <- data.frame(a=c(1, 2, 4, 6), b=c(2, 3, 4, 5))
b <- data.frame(a=c(6, 2, 1, 4), b=c(9, 8, 7, 6))
d <- cbind(a[match(b$a, a$a),], b)
View(d)
a[match(b$a, a$a),]
View(a)
View(b)
data.frame(a[match(b$a, a$a),], c)
data.frame(a[match(b$a, a$a),], b)
a <- data.frame(a=c(1, 2, 4, 6), b=c(2, 3, 4, 5), c=c(5, 7, 6, 2))
b <- data.frame(a=c(6, 2, 1, 4), b=c(3, 3, 2, 2, ), c=c(9, 8, 7, 6))
b <- data.frame(a=c(6, 2, 1, 4), b=c(3, 3, 2, 2), c=c(9, 8, 7, 6))
a <- data.frame(a=c(1, 2, 4, 6), b=c(2, 2, 3, 3), c=c(5, 7, 6, 2))
merge(a, b, by.y=a$a)
merge(a, b, by.y=1)
merge(a, b, by.y="a")
merge(a, b, by.y="a", by.x="a")
View(a)
View(b)
merge(a, b, by.y="a", by.x="b")
merge(a, b, by=c("a", "b)")
)
merge(a, b, by=c("a", "b"))
merge(a, b, by=c("a"))
View(pathLengthAllLong)
test <- merge(data.mountain.yAxis, na.omit(pathLength))
View(test)
test <- merge(data.mountain.yAxis, na.omit(pathLengthAll))
View(test)
View(test)
test <- merge(data.mountain.yAxis, na.omit(pathLengthAll), by=c("trialNum", "name"))
View(data.mountain.yAxis)
View(pathLengthAll)
test <- merge(data.mountain.yAxis, na.omit(pathLengthAllLong))
View(test)
View(pathLengthAllLong)
colnames(pathLengthAllLong) <- trialNumYaxis
colnames(pathLengthAllLong) <- 'trialNumYaxis'
colnames(pathLengthAllLong) <- 'trialNumYAxis'
test <- merge(data.mountain.yAxis, na.omit(pathLengthAllLong), by=c("trialNumYAxis", "name"))
test <- merge(data.mountain.yAxis, na.omit(pathLengthAllLong), by="name")
test <- merge(data.mountain.yAxis, na.omit(pathLengthAllLong), by="trialNumYAxis")
View(test)
test <- merge(data.mountain.yAxis, na.omit(pathLengthAllLong), by="name")
typeof(pathLengthAllLong$name)
pathLengthAllLong$name
View(pathLengthAllLong)
pathLengthprep <- data.frame(t(sapply(data.mountain.yAxis$CurXY,
function(x) data.frame(rbind(x)))),
name=data.mountain.yAxis$name,
trialNum=data.mountain.yAxis$trialNum,
startTrial=data.mountain.yAxis$time)
pathLength <- data.frame(X=unlist(data.frame(pathLengthprep)$X1),
Y=unlist(data.frame(pathLengthprep)$X2),
time=unlist(data.frame(pathLengthprep)$X3),
name = rep(pathLengthprep$name,
sapply(data.frame(pathLengthprep)$X1,
length)),
trialNum=rep(pathLengthprep$trialNum,
sapply(data.frame(pathLengthprep)$X1,
length)),
startTrial=rep(pathLengthprep$startTrial,
sapply(data.frame(pathLengthprep)$X1,
length)))
zooPathY <- zoo(pathLength$Y)
pathLength$pathYRoll <- as.numeric(
ave(pathLength$Y,
FUN = function(x) rollapply(
x,
width = 2,
FUN = diff,
fill = NA,
partial = FALSE)))
# Prepare the data frame with path length for all particpants and all trials
pathLengthAllprep <- data.frame(tapply(abs(pathLength$pathYRoll),
list(pathLength$trialNum, pathLength$name),
sum))
# Add row names as real vector
pathLengthAll <- data.frame(trialNum=rownames(pathLengthAllprep),
pathLengthAllprep)
pathLengthAllLong <- melt(pathLengthAll,
"trialNum",
value.name="pathLength")
# Remove row.names
row.names(pathLengthAll) <- NULL
colnames(pathLengthAllLong)[2] <- "name"
pathLengthAllLong$trialNum <- as.numeric(
as.character(pathLengthAllLong$trialNum))
data.mountain.yAxis$pathLength <- na.omit(pathLengthAllLong$pathLength)
# Make moving average for path length
zooYAxisPath <- zoo(pathLengthAllLong$pathLength)
pathLengthAllLongRoll$pathLengthRoll <- as.numeric(
ave(pathLengthAllLong$pathLength,
pathLengthAllLong$name,
FUN = function(x) rollapply(
x,
width = 10,
FUN = mean,
fill = NA,
partial = FALSE)))
pathLengthAllLongRoll <- melt(pathLengthAllLong,
c("name", "trialNum"))
pathLengthAllLongRoll$name <- as.character(pathLengthAllLongRoll$name)
pathLengthAllLongRoll$trialNum <- as.numeric(
as.character(pathLengthAllLongRoll$trialNum))
# Sort the data according to time
pathLengthAllLongRoll <- pathLengthAllLongRoll[order(pathLengthAllLongRoll$name,
pathLengthAllLongRoll$variable,
pathLengthAllLongRoll$trialNum),]
View(pathLengthAllLong)
pathLengthprep <- data.frame(t(sapply(data.mountain.yAxis$CurXY,
function(x) data.frame(rbind(x)))),
name=data.mountain.yAxis$name,
trialNum=data.mountain.yAxis$trialNum,
startTrial=data.mountain.yAxis$time)
pathLength <- data.frame(X=unlist(data.frame(pathLengthprep)$X1),
Y=unlist(data.frame(pathLengthprep)$X2),
time=unlist(data.frame(pathLengthprep)$X3),
name = rep(pathLengthprep$name,
sapply(data.frame(pathLengthprep)$X1,
length)),
trialNum=rep(pathLengthprep$trialNum,
sapply(data.frame(pathLengthprep)$X1,
length)),
startTrial=rep(pathLengthprep$startTrial,
sapply(data.frame(pathLengthprep)$X1,
length)))
zooPathY <- zoo(pathLength$Y)
pathLength$pathYRoll <- as.numeric(
ave(pathLength$Y,
FUN = function(x) rollapply(
x,
width = 2,
FUN = diff,
fill = NA,
partial = FALSE)))
# Prepare the data frame with path length for all particpants and all trials
pathLengthAllprep <- data.frame(tapply(abs(pathLength$pathYRoll),
list(pathLength$trialNum, pathLength$name),
sum))
# Add row names as real vector
pathLengthAll <- data.frame(trialNum=rownames(pathLengthAllprep),
pathLengthAllprep)
pathLengthAllLong <- melt(pathLengthAll,
"trialNum",
value.name="pathLength")
# Remove row.names
row.names(pathLengthAll) <- NULL
colnames(pathLengthAllLong)[2] <- "name"
pathLengthAllLong$trialNum <- as.numeric(
as.character(pathLengthAllLong$trialNum))
data.mountain.yAxis$pathLength <- na.omit(pathLengthAllLong$pathLength)
# Make moving average for path length
zooYAxisPath <- zoo(pathLengthAllLong$pathLength)
pathLengthAllLongRoll$pathLengthRoll <- as.numeric(
ave(pathLengthAllLong$pathLength,
pathLengthAllLong$name,
FUN = function(x) rollapply(
x,
width = 10,
FUN = mean,
fill = NA,
partial = FALSE)))
pathLengthAllLongRoll <- melt(pathLengthAllLong,
c("name", "trialNum"))
pathLengthAllLongRoll$name <- as.character(pathLengthAllLongRoll$name)
pathLengthAllLongRoll$trialNum <- as.numeric(
as.character(pathLengthAllLongRoll$trialNum))
# Sort the data according to time
pathLengthAllLongRoll <- pathLengthAllLongRoll[order(pathLengthAllLongRoll$name,
pathLengthAllLongRoll$variable,
pathLengthAllLongRoll$trialNum),]
View(pathLengthAllLong)
View(pathLengthAllLong)
pathLengthprep <- data.frame(t(sapply(data.mountain.yAxis$CurXY,
function(x) data.frame(rbind(x)))),
name=data.mountain.yAxis$name,
trialNum=data.mountain.yAxis$trialNum,
startTrial=data.mountain.yAxis$time)
pathLength <- data.frame(X=unlist(data.frame(pathLengthprep)$X1),
Y=unlist(data.frame(pathLengthprep)$X2),
time=unlist(data.frame(pathLengthprep)$X3),
name = rep(pathLengthprep$name,
sapply(data.frame(pathLengthprep)$X1,
length)),
trialNum=rep(pathLengthprep$trialNum,
sapply(data.frame(pathLengthprep)$X1,
length)),
startTrial=rep(pathLengthprep$startTrial,
sapply(data.frame(pathLengthprep)$X1,
length)))
zooPathY <- zoo(pathLength$Y)
pathLength$pathYRoll <- as.numeric(
ave(pathLength$Y,
FUN = function(x) rollapply(
x,
width = 2,
FUN = diff,
fill = NA,
partial = FALSE)))
pathLengthAllprep <- data.frame(tapply(abs(pathLength$pathYRoll),
list(pathLength$trialNum, pathLength$name),
sum))
# Add row names as real vector
pathLengthAll <- data.frame(trialNum=rownames(pathLengthAllprep),
pathLengthAllprep)
pathLengthAllLong <- melt(pathLengthAll,
"trialNum",
value.name="pathLength")
library("rjson")
library("ggplot2")
library("gridExtra")
library("zoo")
library("RColorBrewer")
require(gridExtra)
require(zoo)
library(devtools)
library(reshape2)
library(scales)
pathLengthprep <- data.frame(t(sapply(data.mountain.yAxis$CurXY,
function(x) data.frame(rbind(x)))),
name=data.mountain.yAxis$name,
trialNum=data.mountain.yAxis$trialNum,
startTrial=data.mountain.yAxis$time)
pathLength <- data.frame(X=unlist(data.frame(pathLengthprep)$X1),
Y=unlist(data.frame(pathLengthprep)$X2),
time=unlist(data.frame(pathLengthprep)$X3),
name = rep(pathLengthprep$name,
sapply(data.frame(pathLengthprep)$X1,
length)),
trialNum=rep(pathLengthprep$trialNum,
sapply(data.frame(pathLengthprep)$X1,
length)),
startTrial=rep(pathLengthprep$startTrial,
sapply(data.frame(pathLengthprep)$X1,
length)))
zooPathY <- zoo(pathLength$Y)
pathLength$pathYRoll <- as.numeric(
ave(pathLength$Y,
FUN = function(x) rollapply(
x,
width = 2,
FUN = diff,
fill = NA,
partial = FALSE)))
# Prepare the data frame with path length for all particpants and all trials
pathLengthAllprep <- data.frame(tapply(abs(pathLength$pathYRoll),
list(pathLength$trialNum, pathLength$name),
sum))
# Add row names as real vector
pathLengthAll <- data.frame(trialNum=rownames(pathLengthAllprep),
pathLengthAllprep)
pathLengthAllLong <- melt(pathLengthAll,
"trialNum",
value.name="pathLength")
# Remove row.names
row.names(pathLengthAll) <- NULL
colnames(pathLengthAllLong)[2] <- "name"
pathLengthAllLong$trialNum <- as.numeric(
as.character(pathLengthAllLong$trialNum))
data.mountain.yAxis$pathLength <- na.omit(pathLengthAllLong$pathLength)
# Make moving average for path length
zooYAxisPath <- zoo(pathLengthAllLong$pathLength)
pathLengthAllLongRoll$pathLengthRoll <- as.numeric(
ave(pathLengthAllLong$pathLength,
pathLengthAllLong$name,
FUN = function(x) rollapply(
x,
width = 10,
FUN = mean,
fill = NA,
partial = FALSE)))
pathLengthAllLongRoll <- melt(pathLengthAllLong,
c("name", "trialNum"))
pathLengthAllLongRoll$name <- as.character(pathLengthAllLongRoll$name)
pathLengthAllLongRoll$trialNum <- as.numeric(
as.character(pathLengthAllLongRoll$trialNum))
# Sort the data according to time
pathLengthAllLongRoll <- pathLengthAllLongRoll[order(pathLengthAllLongRoll$name,
pathLengthAllLongRoll$variable,
pathLengthAllLongRoll$trialNum),]
View(pathLengthAllLong)
