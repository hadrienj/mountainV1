# Reshape the data frame into long format
meanThresholdLong <- melt(meanThresholds, id.var="session",
variable.name = "condition",
value.name = "threshold")
# Calculate the mean threshold for each participant and each condition
meanThresholdsSubj <- data.frame(name = levels(
factor(thresholdsAllLong$name)),
tapply(thresholdsAllLong$threshold,
list(thresholdsAllLong$name,
thresholdsAllLong$condition),
mean))
meanThresholdsSubjLong <- melt(meanThresholdsSubj, id.var="name",
variable.name = "condition",
value.name = "threshold")
# Prepare plots
plotThresholds <- ggplot(data=thresholdsAllLong,
aes(x=as.numeric(session),
y=threshold,
color=name,
linetype=condition),
alpha = 0.4) +
geom_line() +
xlab("Sessions") +
ylab("Thresholds") +
facet_grid(name ~ ., scales="free") +
theme(panel.margin = unit(3.5, "mm"))
plotMeanThresholds <- ggplot(data=meanThresholdLong,
aes(x=session,
y=threshold,
linetype=condition),
alpha = 0.4) +
geom_line() +
xlab("Sessions") +
ylab("Thresholds") +
ggtitle("Mean threshold for detection and identification conditions")
plotDetById <- ggplot(thresholdsAllLong, aes(
x=threshold[condition=="detection"],
y=threshold[condition=="identification"],
color=name[condition=="identification"]),
log10="y") +
geom_point(aes(shape=session[condition=="identification"])) +
geom_abline(intercept = 0, slope = 1) +
scale_colour_discrete(name = "Participants") +
scale_shape(name = "Sessions") +
scale_x_continuous(limits=c(10, 400)) +
scale_y_continuous(limits=c(10, 400)) +
xlab("Detection threshold") +
ylab("Identification threshold") +
ggtitle("Detection against identification thresholds
\n for all subjects and all sessions")
############ DELTAF ANALYSES ############
# Compute the mean of deltaF between subjects
# The list is the factors used (the function is applied to each levels)
deltaFMeans <- data.frame(tapply(data.threshold$deltaF,
list(data.threshold$trialNum,
data.threshold$sessionNum,
data.threshold$task),
mean))
deltaFMeansreshaped1 <- reshape(deltaFMeans, direction= "long",
varying=list(1:4, 5:8),
ids=row.names(deltaFMeans),
idvar="trialNum",
timevar="session",
times=list("1","2",
"3","4"))
deltaFMeansLong <- reshape(deltaFMeansreshaped1, direction= "long",
varying=list(2:3),
times=list("detection","identification"))
# Remove unused columns
deltaFMeansLong$id <- NULL
row.names(deltaFMeansLong) <- NULL
# Rename columns
colnames(deltaFMeansLong)[3] <- "condition"
colnames(deltaFMeansLong)[4] <- "threshold"
row.names(deltaFMeansLong) <- NULL
# Prepare plots
plotDeltaF <- ggplot(data=data.threshold,
aes(x=trialNum,
y=deltaF,
color=factor(sessionNum)),
alpha = 0.4) +
xlab("Trials") +
ylab("DeltaF (cents)") +
geom_line() +
scale_color_discrete(name="Session") +
facet_grid(name ~ task, scales="free") +
theme(panel.margin = unit(3.5, "mm"))
plotDeltaFMeans <- ggplot(data=deltaFMeansLong,
aes(x=as.numeric(trialNum),
y=threshold,
color=factor(session)),
alpha = 0.4) +
geom_line() +
scale_color_discrete(name="Session") +
facet_grid(. ~ condition) +
xlab("Trials") +
ylab("DeltaF (cents)") +
ggtitle("Mean of deltaF")
View(data)
View(data[data$name=='ll07'])
View(data[data$name=='ll07',])
library("rjson")
# Import Json file
json.file.sa20 <- "./raw_data/sa20.txt"
json.data.sa20 <- jsonlite::fromJSON(json.file.sa20)
# Put data in a data frame
raw.data.sa20 <- json.data.sa20$rows$doc
raw.data.sa20$name <-"sa20"
# Import Json file
json.file.ab22 <- "./raw_data/ab22.txt"
json.data.ab22 <- jsonlite::fromJSON(json.file.ab22)
# Put data in a data frame
raw.data.ab22 <- json.data.ab22$rows$doc
raw.data.ab22$name <-"ab22"
# Import Json file
json.file.dd04 <- "./raw_data/dd04.txt"
json.data.dd04 <- jsonlite::fromJSON(json.file.dd04)
# Put data in a data frame
raw.data.dd04 <- json.data.dd04$rows$doc
raw.data.dd04$name <-"dd04"
raw.data.dd04$tonePosX <- NA
raw.data.dd04$tonePosY <- NA
# Import Json file
json.file.ap08 <- "./raw_data/ap08.txt"
json.data.ap08 <- jsonlite::fromJSON(json.file.ap08)
# Put data in a data frame
raw.data.ap08 <- json.data.ap08$rows$doc
raw.data.ap08$name <-"ap08"
raw.data.ap08$tonePosX <- NA
raw.data.ap08$tonePosY <- NA
# Import Json file
json.file.shr28 <- "./raw_data/shr28.txt"
json.data.shr28 <- jsonlite::fromJSON(json.file.shr28)
# Put data in a data frame
raw.data.shr28 <- json.data.shr28$rows$doc
raw.data.shr28$name <-"shr28"
raw.data.shr28$tonePosX <- NA
raw.data.shr28$tonePosY <- NA
# Import Json file
json.file.hj12 <- "./raw_data/hj12.txt"
json.data.hj12 <- jsonlite::fromJSON(json.file.hj12)
# Put data in a data frame
raw.data.hj12 <- json.data.hj12$rows$doc
raw.data.hj12$name <-"hj12"
raw.data.hj12$tonePosX <- NA
raw.data.hj12$tonePosY <- NA
# Import Json file
json.file.ll07_proc <- "./raw_data/ll07_proc.txt"
json.data.ll07_proc <- jsonlite::fromJSON(json.file.ll07_proc)
# Put data in a data frame
raw.data.ll07_proc <- json.data.ll07_proc$rows$doc
raw.data.ll07_proc$name <-"ll07"
raw.data.ll07_proc$tonePosX <- NA
raw.data.ll07_proc$tonePosY <- NA
raw.data <- rbind(raw.data.sa20, raw.data.ab22, raw.data.dd04, raw.data.ap08,
raw.data.shr28, raw.data.hj12, raw.data.ll07_proc)
# Change the column names
colnames(raw.data)[1] <- "id"
colnames(raw.data)[2] <- "rev"
# Remove unused rows (metaData and metaDataThresh are used to store data used in the app)
data <- raw.data[!(raw.data$id == "metaData"
| raw.data$id == "metaDataThresh"
| raw.data$id == "dummy"),]
# Sort the data according to time
data <- data[order(data$startTrial),]
# Forwarding reversal values to correct bug in the data collect for the subject sa20 and ab22
for (i in 0:length(data$reversal[data$name=="sa20" | data$name=="ab22"])) {
data$reversal[
data$name=="sa20" | data$name=="ab22"][i]=data$reversal[
data$name=="sa20" | data$name=="ab22"][i+1]
}
for (i in 0:length(data$reversal[data$name=="sa20" | data$name=="ab22"])) {
data$reversals[
data$name=="sa20" | data$name=="ab22"][i]=data$reversals[
data$name=="sa20" | data$name=="ab22"][i+1]
}
# Too much trials in the threshold task before training: sessions 0, 1, 2, 3 are before.
# Remove the session 2 and 3 and convert name of sessions 4 and 5 by 2 and 3 respectively
data <- subset(data, !((grepl("threshold2", id)
| grepl("threshold3", id))
& grepl("shr28", name)))
data$id[data$name=="shr28"] = gsub("threshold4", "threshold2",
data$id[data$name=="shr28"])
data$id[data$name=="shr28"] = gsub("threshold5", "threshold3",
data$id[data$name=="shr28"])
# Also in sessionNum
data$sessionNum[data$name=="shr28"] = gsub("4", "2",
data$sessionNum[data$name=="shr28"])
data$sessionNum[data$name=="shr28"] = gsub("5", "3",
data$sessionNum[data$name=="shr28"])
# No session 0 for ap08 and first session post-test with bug so remove it
data <- subset(data, !(grepl("threshold3", id)
& grepl("ap08", name)))
data$id[data$name=="ap08"] = gsub("threshold1", "threshold0",
data$id[data$name=="ap08"])
data$id[data$name=="ap08"] = gsub("threshold2", "threshold1",
data$id[data$name=="ap08"])
data$id[data$name=="ap08"] = gsub("threshold4", "threshold2",
data$id[data$name=="ap08"])
data$id[data$name=="ap08"] = gsub("threshold5", "threshold3",
data$id[data$name=="ap08"])
# Also in sessionNum
data$sessionNum[data$name=="ap08"] = gsub("1", "0",
data$sessionNum[data$name=="ap08"])
data$sessionNum[data$name=="ap08"] = gsub("2", "1",
data$sessionNum[data$name=="ap08"])
data$sessionNum[data$name=="ap08"] = gsub("4", "2",
data$sessionNum[data$name=="ap08"])
data$sessionNum[data$name=="ap08"] = gsub("5", "3",
data$sessionNum[data$name=="ap08"])
# Bad session number for ll07 because of re-start of the app
# in the middle of the experiment (names corrected with couchdb)
data$sessionNum[data$name=="ll07"
& grepl("threshold2",
data$id)] = gsub("0", "2",
data$sessionNum[data$name=="ll07"
& grepl("threshold2",
data$id)])
data$sessionNum[data$name=="ll07"] = gsub("4", "3",
data$sessionNum[data$name=="ll07"])
# Remove unused columns
data$rev <- NULL
row.names(data) <- NULL
# Add duration variable in seconds
# Create function to extract the last value of each matrix (= each trial) from the CurXY
extractDur <- function(x) tail(x[,3], n=1)/1000
data$duration <- sapply(data$CurXY, extractDur)
data$duration <- as.numeric(data$duration)
# Analyses from the "data" data frame
# Output data frame:
#    - data.threshold (all data concerning the frequency threshold task)
#    - thresholdsAllLong (thresh for each participant and condition)
#    - meanThresholdLong (mean thresh among participants for each condition)
#    - deltaFMeansLong (mean deltaF for each trial number)
#    - meanThresholdsSubjLong (mean threshold for each subj and each condition)
#
# Output plots:
#    - plotThresholds (thresh for each subject, condition and session)
#    - plotMeanThresholds (mean thresh for each condition and session)
#    - plotDetById (identification against detection thresh for each subject)
#    - plotDeltaF (deltaF against trials for each subject)
#    - plotDeltaFMeans (mean deltaF against trials)
data.threshold <- subset(data, grepl("threshold", id),
c(id, trialNum,sessionNum,sessionThreshNum,
reversal,  reversals,  task,	startTrial,
tone1, tone2,	tone3, tone4, deltaF,
goodAnswer,	roving,	answer,	score, name))
############ THRESHOLD ANALYSES ############
# Calculate the frequency threshold of all participants
thresholdsAllWide <- data.frame(tapply(
data.threshold$deltaF[data.threshold$reversals > 4],
list(data.threshold$name[data.threshold$reversals > 4],
data.threshold$sessionNum[data.threshold$reversals > 4],
data.threshold$task[data.threshold$reversals > 4]),
mean))
thresholdsAllreshaped1 <- reshape(thresholdsAllWide, direction= "long",
varying=list(1:4, 5:8),
ids=row.names(thresholdsAllWide),
idvar="name",
timevar="session",
times=list("1","2",
"3","4"))
thresholdsAllLong <- reshape(thresholdsAllreshaped1, direction= "long",
varying=list(2:3),
times=list("detection","identification"))
# Remove unused columns
thresholdsAllLong$id <- NULL
row.names(thresholdsAllLong) <- NULL
# Rename columns
colnames(thresholdsAllLong)[3] <- "condition"
colnames(thresholdsAllLong)[4] <- "threshold"
# Calculate the mean threshold for each session
meanThresholds <- data.frame(session = as.numeric(
levels(factor(thresholdsAllLong$session))),
tapply(thresholdsAllLong$threshold,
list(thresholdsAllLong$session,
thresholdsAllLong$condition),
mean))
# Reshape the data frame into long format
meanThresholdLong <- melt(meanThresholds, id.var="session",
variable.name = "condition",
value.name = "threshold")
# Calculate the mean threshold for each participant and each condition
meanThresholdsSubj <- data.frame(name = levels(
factor(thresholdsAllLong$name)),
tapply(thresholdsAllLong$threshold,
list(thresholdsAllLong$name,
thresholdsAllLong$condition),
mean))
meanThresholdsSubjLong <- melt(meanThresholdsSubj, id.var="name",
variable.name = "condition",
value.name = "threshold")
# Prepare plots
plotThresholds <- ggplot(data=thresholdsAllLong,
aes(x=as.numeric(session),
y=threshold,
color=name,
linetype=condition),
alpha = 0.4) +
geom_line() +
xlab("Sessions") +
ylab("Thresholds") +
facet_grid(name ~ ., scales="free") +
theme(panel.margin = unit(3.5, "mm"))
plotMeanThresholds <- ggplot(data=meanThresholdLong,
aes(x=session,
y=threshold,
linetype=condition),
alpha = 0.4) +
geom_line() +
xlab("Sessions") +
ylab("Thresholds") +
ggtitle("Mean threshold for detection and identification conditions")
plotDetById <- ggplot(thresholdsAllLong, aes(
x=threshold[condition=="detection"],
y=threshold[condition=="identification"],
color=name[condition=="identification"]),
log10="y") +
geom_point(aes(shape=session[condition=="identification"])) +
geom_abline(intercept = 0, slope = 1) +
scale_colour_discrete(name = "Participants") +
scale_shape(name = "Sessions") +
scale_x_continuous(limits=c(10, 400)) +
scale_y_continuous(limits=c(10, 400)) +
xlab("Detection threshold") +
ylab("Identification threshold") +
ggtitle("Detection against identification thresholds
\n for all subjects and all sessions")
############ DELTAF ANALYSES ############
# Compute the mean of deltaF between subjects
# The list is the factors used (the function is applied to each levels)
deltaFMeans <- data.frame(tapply(data.threshold$deltaF,
list(data.threshold$trialNum,
data.threshold$sessionNum,
data.threshold$task),
mean))
deltaFMeansreshaped1 <- reshape(deltaFMeans, direction= "long",
varying=list(1:4, 5:8),
ids=row.names(deltaFMeans),
idvar="trialNum",
timevar="session",
times=list("1","2",
"3","4"))
deltaFMeansLong <- reshape(deltaFMeansreshaped1, direction= "long",
varying=list(2:3),
times=list("detection","identification"))
# Remove unused columns
deltaFMeansLong$id <- NULL
row.names(deltaFMeansLong) <- NULL
# Rename columns
colnames(deltaFMeansLong)[3] <- "condition"
colnames(deltaFMeansLong)[4] <- "threshold"
row.names(deltaFMeansLong) <- NULL
# Prepare plots
plotDeltaF <- ggplot(data=data.threshold,
aes(x=trialNum,
y=deltaF,
color=factor(sessionNum)),
alpha = 0.4) +
xlab("Trials") +
ylab("DeltaF (cents)") +
geom_line() +
scale_color_discrete(name="Session") +
facet_grid(name ~ task, scales="free") +
theme(panel.margin = unit(3.5, "mm"))
plotDeltaFMeans <- ggplot(data=deltaFMeansLong,
aes(x=as.numeric(trialNum),
y=threshold,
color=factor(session)),
alpha = 0.4) +
geom_line() +
scale_color_discrete(name="Session") +
facet_grid(. ~ condition) +
xlab("Trials") +
ylab("DeltaF (cents)") +
ggtitle("Mean of deltaF")
View(deltaFMeansLong)
View(meanThresholdLong)
View(meanThresholdLong)
View(meanThresholdsSubjLong)
View(thresholdsAllLong)
data.mountain.yAxis <- subset(data, grepl("yAxis", condition),
c(id, yTopDist, targetTone, CurXY, trialNumYAxis,
result, name, duration, time, score))
# Sort the data according to time then to trial number
data.mountain.yAxis <- data.mountain.yAxis[order(
data.mountain.yAxis$time, data.mountain.yAxis$trialNumYAxis),]
row.names(data.mountain.yAxis) <- NULL
# Extract trial score and replace the score values if it exists (it exists for all except sa20 and ab22)
data.mountain.yAxis$score <-
((1 / (((data.mountain.yAxis$duration/100)+1)^2)) + 1) *
(600*(((100-data.mountain.yAxis$result)/100)^2))
# Make moving average for scores
zooYAxisAccuracy <- zoo(data.mountain.yAxis$result)
data.mountain.yAxis$YAxisAccuracyRoll <- as.numeric(
ave(data.mountain.yAxis$result,
data.mountain.yAxis$name,
FUN = function(x) rollapply(
x,
width = 10,
FUN = mean,
fill = NA,
partial = FALSE)))
# Make moving average for durations
zooYAxisDur <- zoo(data.mountain.yAxis$duration)
data.mountain.yAxis$YAxisDurRoll <- as.numeric(
ave(data.mountain.yAxis$duration,
data.mountain.yAxis$name,
FUN = function(x) rollapply(
x,
width = 10,
FUN = mean,
fill = NA,
partial = FALSE)))
# Make moving average for scores
zooYAxisScore <- zoo(data.mountain.yAxis$score)
data.mountain.yAxis$YAxisScoresRoll <- as.numeric(
ave(data.mountain.yAxis$score,
data.mountain.yAxis$name,
FUN = function(x) rollapply(
x,
width = 10,
FUN = mean,
fill = NA,
partial = FALSE)))
# Create long data frame for durations
yAxisDur <- subset(data.mountain.yAxis,
select = c(id, duration, YAxisDurRoll, name, trialNumYAxis))
yAxisDurLong <- melt(yAxisDur, c("id", "name", "trialNumYAxis"))
# Create long data frame for scores
yAxisScores <- subset(data.mountain.yAxis,
select = c(id, score, YAxisScoresRoll, name, trialNumYAxis))
yAxisScoresLong <- melt(yAxisScores, c("id", "name", "trialNumYAxis"))
# Create long data frame for accuracy
yAxisAcc <- subset(data.mountain.yAxis,
select = c(id, result, YAxisAccuracyRoll, name, trialNumYAxis))
yAxisAccLong <- melt(yAxisAcc, c("id", "name", "trialNumYAxis"))
# Prepare plots
plotAcc <- ggplot(data=yAxisAccLong,
aes(x=trialNumYAxis,
y=value,
alpha = variable,
color=name)) +
scale_alpha_manual(name="Display", labels=c("Raw values",
"Rolling mean \n(10 values)"),
values=c(0.3, 1)) +
guides(color=FALSE) +
xlab("Trials") +
ylab("Accuracy (in percent error)") +
geom_line() +
facet_grid(name ~ ., scales="free")
plotDur <- ggplot(data=yAxisDurLong,
aes(x=trialNumYAxis,
y=value,
alpha = variable,
color=name)) +
scale_alpha_manual(name="Display", labels=c("Raw values",
"Rolling mean \n(10 values)"),
values=c(0.3, 1)) +
guides(color=FALSE) +
xlab("Trials") +
ylab("Duration (in seconds)") +
geom_line() +
facet_grid(name ~ ., scales="free")
plotScores <- ggplot(data=yAxisScoresLong,
aes(x=trialNumYAxis,
y=value,
alpha = variable,
color=name)) +
scale_alpha_manual(name="Display", labels=c("Raw values",
"Rolling mean \n(10 values)"),
values=c(0.3, 1)) +
guides(color=FALSE) +
xlab("Trials") +
ylab("Scores (in points)") +
geom_line() +
facet_grid(name ~ ., scales="free")
# Accuracy by duration
plotAccByDur <- ggplot(data=data.mountain.yAxis,
aes(x=result,
y=duration,
color=name)) +
geom_point() +
xlab("Scores (percentage error)") +
ylab("Duration (in seconds)") +
ggtitle("Score in function of duration")
# Accuracy with thresholds
plotAccThresh <- ggplot(data=yAxisAccLong,
aes(x=trialNumYAxis,
y=value,
alpha = variable,
color=name)) +
scale_alpha_manual(name="Display", labels=c("Raw values",
"Rolling mean \n(10 values)"),
values=c(0.3, 1)) +
guides(color=FALSE) +
xlab("Trials") +
ylab("Accuracy (in percent error)") +
geom_line() +
facet_grid(name ~ ., scales="free") +
ggtitle("Accuracy in the mountain task with thresholds
\nfrom the frequency threshold task")
# Accuracy by frequency
plotAccByFreq <- ggplot(data=data.mountain.yAxis,
aes(x=result,
y=targetTone,
color=name)) +
geom_point() +
xlab("Scores (percentage error)") +
ylab("Frequency of the target tone (in Hz)") +
ggtitle("Score in function of frequency of the target tone")
plotDeltaF
