{
    "contents" : "data.mountain.yAxis <- subset(data, grepl(\"yAxis\", condition),\n                              c(id, yTopDist, targetTone, CurXY, trialNumYAxis,\n                                result, name, duration, time, score))\n\n# Sort the data according to time then to trial number\ndata.mountain.yAxis <- data.mountain.yAxis[order(\n  data.mountain.yAxis$time, data.mountain.yAxis$trialNumYAxis),]\n\nrow.names(data.mountain.yAxis) <- NULL\n\n# Extract trial score and replace the score values if it exists (it exists for all except sa20 and ab22)\ndata.mountain.yAxis$score <-\n  ((1 / (((data.mountain.yAxis$duration/100)+1)^2)) + 1) *\n  (600*(((100-data.mountain.yAxis$result)/100)^2))\n\n\n# Make moving average for scores\nzooYAxisAccuracy <- zoo(data.mountain.yAxis$result)\ndata.mountain.yAxis$YAxisAccuracyRoll <- as.numeric(\n  ave(data.mountain.yAxis$result,\n      data.mountain.yAxis$name,\n      FUN = function(x) rollapply(\n        x,\n        width = 10,\n        FUN = mean,\n        fill = NA,\n        partial = FALSE)))\n# Make moving average for durations\nzooYAxisDur <- zoo(data.mountain.yAxis$duration)\ndata.mountain.yAxis$YAxisDurRoll <- as.numeric(\n  ave(data.mountain.yAxis$duration,\n      data.mountain.yAxis$name,\n      FUN = function(x) rollapply(\n        x,\n        width = 10,\n        FUN = mean,\n        fill = NA,\n        partial = FALSE)))\n# Make moving average for scores\nzooYAxisScore <- zoo(data.mountain.yAxis$score)\ndata.mountain.yAxis$YAxisScoresRoll <- as.numeric(\n  ave(data.mountain.yAxis$score,\n      data.mountain.yAxis$name,\n  FUN = function(x) rollapply(\n    x,\n    width = 10,\n    FUN = mean,\n    fill = NA,\n    partial = FALSE)))\n\n\n# Create long data frame for durations\nyAxisDur <- subset(data.mountain.yAxis,\n                   select = c(id, duration, YAxisDurRoll, name, trialNumYAxis))\nyAxisDurLong <- melt(yAxisDur, c(\"id\", \"name\", \"trialNumYAxis\"))\n# Create long data frame for scores\nyAxisScores <- subset(data.mountain.yAxis,\n                      select = c(id, score, YAxisScoresRoll, name, trialNumYAxis))\nyAxisScoresLong <- melt(yAxisScores, c(\"id\", \"name\", \"trialNumYAxis\"))\n# Create long data frame for accuracy\nyAxisAcc <- subset(data.mountain.yAxis,\n                   select = c(id, result, YAxisAccuracyRoll, name, trialNumYAxis))\nyAxisAccLong <- melt(yAxisAcc, c(\"id\", \"name\", \"trialNumYAxis\"))\n\n# Prepare plots\nplotAcc <- ggplot(data=yAxisAccLong,\n                  aes(x=trialNumYAxis,\n                      y=value,\n                      alpha = variable,\n                      color=name)) +\n  scale_alpha_manual(name=\"Display\", labels=c(\"Raw values\",\n                                              \"Rolling mean \\n(10 values)\"),\n                     values=c(0.3, 1)) +\n  guides(color=FALSE) +\n  xlab(\"Trials\") +\n  ylab(\"Accuracy (in percent error)\") +\n  geom_line() +\n  facet_grid(name ~ ., scales=\"free\")\n\nplotDur <- ggplot(data=yAxisDurLong,\n                     aes(x=trialNumYAxis,\n                         y=value,\n                         alpha = variable,\n                         color=name)) +\n  scale_alpha_manual(name=\"Display\", labels=c(\"Raw values\",\n                                              \"Rolling mean \\n(10 values)\"),\n                     values=c(0.3, 1)) +\n  guides(color=FALSE) +\n  xlab(\"Trials\") +\n  ylab(\"Duration (in seconds)\") +\n  geom_line() +\n  facet_grid(name ~ ., scales=\"free\")\n\nplotScores <- ggplot(data=yAxisScoresLong,\n                  aes(x=trialNumYAxis,\n                      y=value,\n                      alpha = variable,\n                      color=name)) +\n  scale_alpha_manual(name=\"Display\", labels=c(\"Raw values\",\n                                              \"Rolling mean \\n(10 values)\"),\n                     values=c(0.3, 1)) +\n  guides(color=FALSE) +\n  xlab(\"Trials\") +\n  ylab(\"Scores (in points)\") +\n  geom_line() +\n  facet_grid(name ~ ., scales=\"free\")\n\n# Accuracy by duration\nplotAccByDur <- ggplot(data=data.mountain.yAxis,\n                       aes(x=result,\n                           y=duration,\n                           color=name)) +\n  geom_point() +\n  xlab(\"Scores (percentage error)\") +\n  ylab(\"Duration (in seconds)\") +\n  ggtitle(\"Score in function of duration\")\n\n# Accuracy with thresholds\n\nplotAccThresh <- ggplot(data=yAxisAccLong,\n                        aes(x=trialNumYAxis,\n                            y=value,\n                            alpha = variable,\n                            color=name)) +\n  scale_alpha_manual(name=\"Display\", labels=c(\"Raw values\",\n                                              \"Rolling mean \\n(10 values)\"),\n                     values=c(0.3, 1)) +\n  guides(color=FALSE) +\n  xlab(\"Trials\") +\n  ylab(\"Accuracy (in percent error)\") +\n  geom_line() +\n  facet_grid(name ~ ., scales=\"free\") +\n  ggtitle(\"Accuracy in the mountain task with thresholds \n          \\nfrom the frequency threshold task\")\n\n# Accuracy by frequency\nplotAccByFreq <- ggplot(data=data.mountain.yAxis,\n                       aes(x=result,\n                           y=targetTone,\n                           color=name)) +\n  geom_point() +\n  xlab(\"Scores (percentage error)\") +\n  ylab(\"Frequency of the target tone (in Hz)\") +\n  ggtitle(\"Score in function of frequency of the target tone\")\n",
    "created" : 1436351989642.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1383685550",
    "id" : "5C000E13",
    "lastKnownWriteTime" : 1436521653,
    "path" : "~/Dropbox/projets/en_cours/DjangoServer/auditory_mountain/auditory_mountain/r_analyses/R/yAxis.R",
    "project_path" : "R/yAxis.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}