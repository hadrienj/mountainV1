{
    "contents" : "# Analyses from the \"data\" data frame\n# Output data frame:\n#    - data.threshold (all data concerning the frequency threshold task)\n#    - thresholdsAllLong (thresh for each participant and condition)\n#    - meanThresholdLong (mean thresh among participants for each condition)\n#    - deltaFMeansLong (mean deltaF for each trial number)\n#    - meanThresholdsSubjLong (mean threshold for each subj and each condition)\n#    - thresholdAllPrepostLong (mean threshold pre and post for each\n# participant and condition)\n#\n# Output plots:\n#    - plotThresholds (thresh for each subject, condition and session)\n#    - plotMeanThresholds (mean thresh for each condition and session)\n#    - plotDetById (identification against detection thresh for each subject)\n#    - plotDeltaF (deltaF against trials for each subject)\n#    - plotDeltaFMeans (mean deltaF against trials)\n\n\ndata.threshold <- subset(data, grepl(\"threshold\", id),\n                         c(id, trialNum,sessionNum,sessionThreshNum,\n                           reversal,  reversals,  task,  startTrial,\n                           tone1, tone2,\ttone3, tone4, deltaF,\n                           goodAnswer,\troving,\tanswer,\tscore, name))\n\n############ THRESHOLD ANALYSES ############\n\n# Calculate the frequency threshold of all participants\nthresholdsAllWide <- data.frame(tapply(\n  data.threshold$deltaF[data.threshold$reversals > 4],\n  list(data.threshold$name[data.threshold$reversals > 4],\n       data.threshold$sessionNum[data.threshold$reversals > 4],\n       data.threshold$task[data.threshold$reversals > 4]),\n  mean))\nthresholdsAllreshaped1 <- reshape(thresholdsAllWide, direction= \"long\",\n                                  varying=list(1:4, 5:8),\n                                  ids=row.names(thresholdsAllWide),\n                                  idvar=\"name\",\n                                  timevar=\"session\",\n                                  times=list(\"1\",\"2\",\n                                             \"3\",\"4\"))\nthresholdsAllLong <- reshape(thresholdsAllreshaped1, direction= \"long\",\n                             varying=list(2:3),\n                             times=list(\"detection\",\"identification\"))\n# Remove unused columns\nthresholdsAllLong$id <- NULL\nrow.names(thresholdsAllLong) <- NULL\n# Rename columns\ncolnames(thresholdsAllLong)[3] <- \"condition\"\ncolnames(thresholdsAllLong)[4] <- \"threshold\"\n\n# Assign pre or post value in function of session\nthresholdsAllLong$prePost <- ifelse(thresholdsAllLong$session == 1 |\n                                      thresholdsAllLong$session == 2, \"pre\", \"post\")\n# Create a new data frame with the mean threshold by pre and post test\nthresholdAllPrepost <- data.frame(tapply(thresholdsAllLong$threshold,\n                                         list(thresholdsAllLong$prePost,\n                                              thresholdsAllLong$name,\n                                              thresholdsAllLong$condition),\n                                         mean))\nthresholdAllPrepostReshape1 <- reshape(thresholdAllPrepost,\n                                       direction= \"long\",\n                                       varying=list(1:(length(thresholdAllPrepost)/2),\n                                                    ((length(thresholdAllPrepost)/2)+1):length(thresholdAllPrepost)),\n                                       ids=row.names(thresholdAllPrepost),\n                                       idvar=\"prepost\",\n                                       timevar=\"name\",\n                                       times=levels(factor(thresholdsAllLong$name)))\nthresholdAllPrepostLong <- reshape(thresholdAllPrepostReshape1,\n                                   direction= \"long\",\n                                   varying=list(2:3),\n                                   timevar=\"condition\",\n                                   times=list(\"detection\",\"identification\"))\n\ncolnames(thresholdAllPrepostLong)[4] <- \"threshold\"\nrow.names(thresholdAllPrepostLong) <- NULL\nthresholdAllPrepostLong$id <- NULL\n\n\n# Assign value in function of position in the session (first is 1 and 3, second is 2 and 4)\nthresholdsAllLong$prePre <- ifelse(thresholdsAllLong$session == 1 |\n                                     thresholdsAllLong$session == 3, \"first\", \"second\")\n# Create a new data frame with the mean threshold by pre and post test\nthresholdAllPrePre <- data.frame(tapply(thresholdsAllLong$threshold,\n                                        list(thresholdsAllLong$prePre,\n                                             thresholdsAllLong$name,\n                                             thresholdsAllLong$condition),\n                                        mean))\nthresholdAllPrepreReshape1 <- reshape(thresholdAllPrePre,\n                                      direction= \"long\",\n                                      varying=list(1:(length(thresholdAllPrePre)/2),\n                                                   ((length(thresholdAllPrePre)/2)+1):length(thresholdAllPrePre)),\n                                      ids=row.names(thresholdAllPrePre),\n                                      idvar=\"prepre\",\n                                      timevar=\"name\",\n                                      times=levels(factor(thresholdsAllLong$name)))\nthresholdAllPrepreLong <- reshape(thresholdAllPrepreReshape1,\n                                  direction= \"long\",\n                                  varying=list(2:3),\n                                  timevar=\"condition\",\n                                  times=list(\"detection\",\"identification\"))\n\ncolnames(thresholdAllPrepreLong)[4] <- \"threshold\"\nrow.names(thresholdAllPrepreLong) <- NULL\nthresholdAllPrepreLong$id <- NULL\n\n# Calculate the mean threshold for each session\nmeanThresholds <- data.frame(session = as.numeric(\n  levels(factor(thresholdsAllLong$session))),\n  tapply(thresholdsAllLong$threshold,\n         list(thresholdsAllLong$session,\n              thresholdsAllLong$condition),\n         mean))\n# Reshape the data frame into long format\nmeanThresholdLong <- melt(meanThresholds, id.var=\"session\",\n                          variable.name = \"condition\", \n                          value.name = \"threshold\")\n\n# Calculate the mean threshold for each participant and each condition\nmeanThresholdsSubj <- data.frame(name = levels(\n  factor(thresholdsAllLong$name)),\n  tapply(thresholdsAllLong$threshold,\n         list(thresholdsAllLong$name,\n              thresholdsAllLong$condition),\n         mean))\nmeanThresholdsSubjLong <- melt(meanThresholdsSubj, id.var=\"name\",\n                               variable.name = \"condition\", \n                               value.name = \"threshold\")\n\n# Prepare plots\n\nplotThresholds <- ggplot(data=thresholdsAllLong,\n                         aes(x=as.numeric(session),\n                             y=threshold,\n                             color=name,\n                             linetype=condition),\n                         alpha = 0.4) +\n  geom_line() +\n  xlab(\"Sessions\") +\n  ylab(\"Thresholds\") +\n  facet_grid(name ~ ., scales=\"free\") +\n  theme(panel.margin = unit(3.5, \"mm\"))\n\nplotMeanThresholds <- ggplot(data=meanThresholdLong,\n                             aes(x=session,\n                                 y=threshold,\n                                 linetype=condition),\n                             alpha = 0.4) +\n  geom_line() +\n  xlab(\"Sessions\") +\n  ylab(\"Thresholds\") +\n  ggtitle(\"Mean threshold for detection and identification conditions\")\n\nplotDetById <- ggplot(thresholdsAllLong, aes(\n  x=threshold[condition==\"detection\"],\n  y=threshold[condition==\"identification\"],\n  color=name[condition==\"identification\"])) +\n  geom_point(aes(shape=session[condition==\"identification\"])) +\n  coord_fixed() +\n  geom_abline(intercept = 0, slope = 1) +\n  scale_colour_discrete(name = \"Participants\") +\n  scale_shape(name = \"Sessions\") +\n  scale_x_continuous(trans=log_trans(),\n                     limits=c(10, 500),\n                     breaks=c(5, 10, 20, 50, 100, 200, 500)) +\n  scale_y_continuous(trans=log_trans(),\n                     limits=c(10, 500),\n                     breaks=c(5, 10, 20, 50, 100, 200, 500)) +\n  xlab(\"Detection threshold\") +\n  ylab(\"Identification threshold\") +\n  ggtitle(\"Detection against identification thresholds\n          \\n for all subjects and all sessions\")\n\nplotDetByIdPrepost <- ggplot(thresholdAllPrepostLong, aes(\n  x=threshold[condition==\"detection\"],\n  y=threshold[condition==\"identification\"],\n  color=name[condition==\"identification\"])) +\n  geom_point(aes(shape=prepost[condition==\"identification\"])) +\n  coord_fixed() +\n  geom_path(arrow=arrow(length=unit(0.3,\"cm\"), ends = \"first\"),\n            size=0.4, aes(group=name[condition==\"identification\"])) +\n  geom_abline(intercept = 0, slope = 1) +\n  scale_colour_discrete(name = \"Participants\") +\n  scale_shape_manual(name = \"Sessions\", values=c(1, 16),\n                     breaks=c(\"pre\",\"post\")) +\n  scale_x_continuous(trans=log_trans(),\n                     limits=c(5, 500),\n                     breaks=c(5, 10, 20, 50, 100, 200, 500)) +\n  scale_y_continuous(trans=log_trans(),\n                     limits=c(5, 500),\n                     breaks=c(5, 10, 20, 50, 100, 200, 500)) +\n  xlab(\"Detection threshold\") +\n  ylab(\"Identification threshold\") +\n  ggtitle(\"Detection against identification thresholds\n          \\n Pre vs. Post test\")\n\nplotDetByIdPrepre <- ggplot(thresholdAllPrepreLong, aes(\n  x=threshold[condition==\"detection\"],\n  y=threshold[condition==\"identification\"],\n  color=name[condition==\"identification\"])) +\n  geom_point(aes(shape=prepre[condition==\"identification\"])) +\n  coord_fixed() +\n  geom_path(arrow=arrow(length=unit(0.3,\"cm\"), ends = \"last\"),\n            size=0.4, aes(group=name[condition==\"identification\"])) +\n  geom_abline(intercept = 0, slope = 1) +\n  scale_colour_discrete(name = \"Participants\") +\n  scale_shape_manual(name = \"Sessions\", values=c(16, 1),\n                     breaks=c(\"first\",\"second\")) +\n  scale_x_continuous(trans=log_trans(),\n                     limits=c(5, 500),\n                     breaks=c(5, 10, 20, 50, 100, 200, 500)) +\n  scale_y_continuous(trans=log_trans(),\n                     limits=c(5, 500),\n                     breaks=c(5, 10, 20, 50, 100, 200, 500)) +\n  xlab(\"Detection threshold\") +\n  ylab(\"Identification threshold\") +\n  ggtitle(\"Detection against identification thresholds\n          \\n First vs. Second test\")\n\n\n\n############ DELTAF ANALYSES ############\n\n# Compute the mean of deltaF between subjects\n# The list is the factors used (the function is applied to each levels)\ndeltaFMeans <- data.frame(tapply(data.threshold$deltaF,\n                                 list(data.threshold$trialNum,\n                                      data.threshold$sessionNum,\n                                      data.threshold$task),\n                                 mean))\n\ndeltaFMeansreshaped1 <- reshape(deltaFMeans, direction= \"long\",\n                                varying=list(1:4, 5:8),\n                                ids=row.names(deltaFMeans),\n                                idvar=\"trialNum\",\n                                timevar=\"session\",\n                                times=list(\"1\",\"2\",\n                                           \"3\",\"4\"))\n\ndeltaFMeansLong <- reshape(deltaFMeansreshaped1, direction= \"long\",\n                           varying=list(2:3),\n                           times=list(\"detection\",\"identification\"))\n# Remove unused columns\ndeltaFMeansLong$id <- NULL\nrow.names(deltaFMeansLong) <- NULL\n# Rename columns\ncolnames(deltaFMeansLong)[3] <- \"condition\"\ncolnames(deltaFMeansLong)[4] <- \"threshold\"\nrow.names(deltaFMeansLong) <- NULL\n\n# Prepare plots\n\nplotDeltaF <- ggplot(data=data.threshold,\n                     aes(x=trialNum,\n                         y=deltaF,\n                         color=factor(sessionNum)),\n                     alpha = 0.4) +\n  xlab(\"Trials\") +\n  ylab(\"DeltaF (cents)\") +\n  geom_line() +\n  scale_color_discrete(name=\"Session\") +\n  facet_grid(name ~ task, scales=\"free\") +\n  theme(panel.margin = unit(3.5, \"mm\"))\n\nplotDeltaFMeans <- ggplot(data=deltaFMeansLong,\n                          aes(x=as.numeric(trialNum),\n                              y=threshold,\n                              color=factor(session)),\n                          alpha = 0.4) +\n  geom_line() +\n  scale_color_discrete(name=\"Session\") +\n  facet_grid(. ~ condition) +\n  xlab(\"Trials\") +\n  ylab(\"DeltaF (cents)\") +\n  ggtitle(\"Mean of deltaF\")\n\n",
    "created" : 1436351801290.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1523110471",
    "id" : "4060F3EC",
    "lastKnownWriteTime" : 1437389294,
    "path" : "~/Dropbox/projets/en_cours/DjangoServer/auditory_mountain/r_analyses/R/threshold.R",
    "project_path" : "R/threshold.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}